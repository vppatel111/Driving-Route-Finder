Things we need to get done:

---Implement the interface for selecting two points with the joystick


---communicating these points to the server over the serial port
	--> the server must switch to communicating with the Arduino through a serial port via the help of the pyserial package
	--> both the client and the server must implement timeouts when waiting for a reply from the other party (more on timeouts below)
	--> Both the client and the server should reset their states upon receiving a message which does not make sense in their current state
	--> Done in python

---receiving the resulting path
	--> If they select new start and destination points, a new path should be retrieved from the server

---displaying the path overlaid on the map
	--> while the route is displayed, we should still be able to 	operate around the map as usual
	--> You may decide whether you want to still display the route when the user has already selected a start point but has not yet selected a destination point
	--> It seems that we are using c++ code for this part.

---timeout
	--> The timeout is effective when:
		--> when the server is waiting for acknowledge-ment of data receipt from the Arduino
		--> when the Arduino is waiting for either the number of waypoints, the next waypoint, or the final â€˜Eâ€™ characte
	--> The length of the timeout is by default 1s, except when the Arduino waits for the number of waypoints to be received from the server, in which case the timeout should be 10s
	--> When a timeout expires:
		--> server should reset its state to waiting for a client to start communicating with it
		--> the Arduino should restart the communication attempt
	--> Finite state machine required
